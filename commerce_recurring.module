<?php

/**
 * @file
 * Provides recurring billing for Drupal Commerce.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\commerce\PurchasableEntityInterface;

/**
 * Implements hook_commerce_entity_trait_info_alter().
 */
function commerce_recurring_commerce_entity_trait_info_alter(array &$definitions) {
  // Expose the purchasable entity trait for every purchasable entity type.
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $entity_types = array_filter($entity_types, function (EntityTypeInterface $entity_type) {
    return $entity_type->entityClassImplements(PurchasableEntityInterface::class);
  });
  $entity_type_ids = array_keys($entity_types);

  $definitions['purchasable_entity_subscription']['entity_types'] = $entity_type_ids;
}

/**
 * Implements hook_cron().
 */
function commerce_recurring_cron() {
  \Drupal::service('commerce_recurring.cron')->run();
}

/**
 * Implements hook_mail().
 *
 * Captures the outgoing mail and sets appropriate message body and headers.
 */
function commerce_recurring_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }

  $message['from'] = $params['from'];
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_theme().
 */
function commerce_recurring_theme($existing, $type, $theme, $path) {
  return [
    'commerce_recurring_payment_declined' => [
      'variables' => [
        'order_entity' => NULL,
        'billing_information' => NULL,
        'shipping_information' => NULL,
        'payment_method_link' => NULL,
        'retry_num' => NULL,
        'retry_days' => NULL,
        'totals' => NULL,
      ],
    ],
  ];
}
